// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Program model - stores academic programs (BSIT, BSCPE, etc.)
model Program {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "BSIT", "BSCPE"
  displayName String   // e.g., "Bachelor of Science in Information Technology"
  description String?  // Optional description of the program
  isActive    Boolean  @default(true) // Allow programs to be disabled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  students Student[]
  activities Activity[]

  @@map("programs")
}

// Student model - stores student registration data
model Student {
  id              String   @id @default(cuid())
  studentIdNumber String   @unique // Format: S000-0000-000 (enforced by validation)
  firstName       String
  lastName        String
  email           String   @unique
  year            Int      // Academic year level (1-5)
  programId       String   // Foreign key to Program
  registrationSource String @default("public") // "admin" or "public"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  program Program @relation(fields: [programId], references: [id], onDelete: Restrict)
  activities Activity[]
  attendance Attendance[]

  // Indexes for performance
  @@index([studentIdNumber])
  @@index([email])
  @@index([programId])
  @@index([year])
  @@index([registrationSource])
  @@index([createdAt])
  
  @@map("students")
}

// Registration attempt logging model - tracks all registration attempts
model RegistrationAttempt {
  id          String   @id @default(cuid())
  studentId   String?  // Reference to student if successful, null if failed
  attemptData Json     // Stores the attempted registration data
  source      String   // "admin" or "public"
  success     Boolean  // Whether the registration was successful
  errorMessage String? // Error message if failed
  ipAddress   String?  // IP address of the registrant
  userAgent   String?  // User agent string
  createdAt   DateTime @default(now())

  // Indexes for analytics
  @@index([source])
  @@index([success])
  @@index([createdAt])
  @@index([ipAddress])
  
  @@map("registration_attempts")
}

// Email status tracking model - tracks email sending status
model EmailStatus {
  id          String   @id @default(cuid())
  studentId   String   // Reference to student
  emailType   String   // "welcome_admin" or "welcome_public"
  status      String   // "pending", "sent", "failed", "retry"
  attempts    Int      @default(0)
  lastAttempt DateTime?
  errorMessage String?
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes for monitoring
  @@index([studentId])
  @@index([status])
  @@index([emailType])
  @@index([createdAt])
  
  @@map("email_status")
}



// Activity model - comprehensive activity logging for dashboard feed
model Activity {
  id          String   @id @default(cuid())
  type        String   // Activity type: "student_registration", "qr_generation", "admin_action", "system_event"
  action      String   // Specific action: "register", "update", "delete", "generate_qr", "login", "export", etc.
  description String   // Human-readable description of the activity
  
  // Entity references (nullable to support different activity types)
  studentId   String?  // Reference to student if activity involves a student
  programId   String?  // Reference to program if activity involves a program
  userId      String?  // Reference to Supabase user if activity performed by authenticated user
  organizerId String?  // Reference to organizer if activity performed by organizer
  eventId     String?  // Reference to event if activity involves an event
  
  // Activity metadata
  metadata    Json?    // Additional structured data about the activity
  source      String   @default("system") // "admin", "public", "system", "api"
  severity    String   @default("info") // "info", "warning", "error", "success"
  category    String   // "registration", "authentication", "data_management", "system", "analytics"
  
  // Context information
  ipAddress   String?  // IP address where activity originated
  userAgent   String?  // User agent if web-based activity
  sessionId   String?  // Session identifier for tracking user sessions
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relationships
  student     Student? @relation(fields: [studentId], references: [id], onDelete: SetNull)
  program     Program? @relation(fields: [programId], references: [id], onDelete: SetNull)
  organizer   Organizer? @relation(fields: [organizerId], references: [id], onDelete: SetNull)
  event       Event? @relation(fields: [eventId], references: [id], onDelete: SetNull)
  // Note: userId references Supabase auth.users (not a Prisma relationship)
  
  // Indexes for performance and querying
  @@index([type])
  @@index([action])
  @@index([category])
  @@index([source])
  @@index([severity])
  @@index([studentId])
  @@index([userId])
  @@index([programId])
  @@index([organizerId])
  @@index([eventId])
  @@index([createdAt])
  @@index([type, createdAt]) // Composite index for activity feed queries
  @@index([category, createdAt]) // Composite index for category-based queries
  @@index([source, createdAt]) // Composite index for source-based queries
  
  @@map("activities")
}

// Organizer model - stores event organizers and their roles
model Organizer {
  id          String   @id @default(cuid())
  email       String   @unique // Must match Supabase auth.users email
  fullName    String
  role        String   @default("organizer") // "organizer" or "admin"
  isActive    Boolean  @default(true)
  invitedBy   String?  // Reference to admin who invited this organizer
  invitedAt   DateTime?
  invitationToken     String?   @unique
  invitationExpiresAt DateTime?
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  eventAssignments OrganizerEventAssignment[]
  activities       Activity[]

  // Indexes for performance
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([invitedBy])
  @@index([createdAt])
  
  @@map("organizers")
}

// Event model - stores events that can have attendance sessions
model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  isActive    Boolean  @default(true)
  createdBy   String   // Reference to admin who created the event
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  sessions            Session[]
  organizerAssignments OrganizerEventAssignment[]
  attendance          Attendance[]
  activities          Activity[]

  // Indexes for performance
  @@index([name])
  @@index([startDate])
  @@index([endDate])
  @@index([isActive])
  @@index([createdBy])
  @@index([createdAt])
  
  @@map("events")
}

// Session model - stores attendance sessions within events
model Session {
  id          String   @id @default(cuid())
  eventId     String   // Foreign key to Event
  name        String   // e.g., "Morning Session", "Afternoon Session"
  description String?
  timeInStart DateTime // Start time for Time-In scanning
  timeInEnd   DateTime // End time for Time-In scanning
  timeOutStart DateTime? // Start time for Time-Out scanning
  timeOutEnd  DateTime? // End time for Time-Out scanning
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  event      Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendance Attendance[]

  // Indexes for performance
  @@index([eventId])
  @@index([timeInStart])
  @@index([timeInEnd])
  @@index([timeOutStart])
  @@index([timeOutEnd])
  @@index([isActive])
  @@index([createdAt])
  
  @@map("sessions")
}

// OrganizerEventAssignment model - manages which organizers can access which events
model OrganizerEventAssignment {
  id          String   @id @default(cuid())
  organizerId String   // Foreign key to Organizer
  eventId     String   // Foreign key to Event
  assignedBy  String   // Reference to admin who made the assignment
  assignedAt  DateTime @default(now())
  isActive    Boolean  @default(true)

  // Relationships
  organizer Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Ensure unique organizer-event combinations
  @@unique([organizerId, eventId])
  
  // Indexes for performance
  @@index([organizerId])
  @@index([eventId])
  @@index([assignedBy])
  @@index([assignedAt])
  @@index([isActive])
  
  @@map("organizer_event_assignments")
}

// Attendance model - stores attendance records from QR scanning
model Attendance {
  id          String   @id @default(cuid())
  studentId   String   // Foreign key to Student
  eventId     String   // Foreign key to Event
  sessionId   String   // Foreign key to Session
  timeIn      DateTime? // When student scanned in
  timeOut     DateTime? // When student scanned out
  scanType    String   // "time_in" or "time_out"
  scannedBy   String?  // Reference to organizer who performed the scan
  ipAddress   String?  // IP address of the scanning device
  userAgent   String?  // User agent of the scanning device
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Ensure unique student-session combinations for time_in/time_out
  @@unique([studentId, sessionId, scanType])
  
  // Indexes for performance
  @@index([studentId])
  @@index([eventId])
  @@index([sessionId])
  @@index([scanType])
  @@index([scannedBy])
  @@index([timeIn])
  @@index([timeOut])
  @@index([createdAt])
  
  @@map("attendance")
}
